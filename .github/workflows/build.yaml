name: build
on:
  push: []
  schedule:
  - cron: 59 14 * * *
  pull_request: []

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        resolver: [lts-12.26, lts-13.30, lts-14.27]
    steps:
    - uses: actions/checkout@v1
      if: github.event_name != 'pull_request'
      with:
        fetch-depth: 1
    - uses: actions/checkout@v1
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.pull_request.head.sha }}
        fetch-depth: 1
    - name: Set up resolver
      shell: bash
      run: |
        sed \
          -i \
          -E 's/^resolver: .*$/resolver: "${{ matrix.resolver }}"/' \
          stack.yaml
        if [[ "${{ matrix.os }}" = windows-* ]]; then
          curl -L -o /usr/bin/yq \
            https://github.com/mikefarah/yq/releases/download/2.4.0/yq_windows_amd64.exe
            yq delete -i stack.yaml flags.seonbi.iconv
        fi
        cat stack.yaml
        # Try 3 times because this sometimes fails due to network error
        # on GitHub Actions.
        stack setup || stack setup || stack setup
    - name: Check version
      if: >-
        github.event_name != 'pull_request' &&
        startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        pkg_ver="$(stack query locals seonbi version)"
        echo "Package version: $pkg_ver"
        tag_ver="${GITHUB_REF:10}"
        echo "Git tag version: $tag_ver"
        [[ "$tag_ver" = "$pkg_ver" ]]
        ! grep -i "to be released" CHANGES.md
    - name: Resolve dependencies
      run: stack install --only-dependencies
    - name: Build
      run: stack build
    - name: Test
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" = "macos-10.15" && \
              "${{ matrix.resolver }}" = lts-12.* ]]; then
          # On GHC-8.4 & macOS doctest does not work.
          # See also:
          #   https://github.com/sol/doctest/issues/199
          #   https://ghc.haskell.org/trac/ghc/ticket/15105
          stack test :spec
        else
          stack test
        fi
    - name: Package source distribution
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        # Hackage disallows -Werror
        sed -i 's/^ *- -Werror$//g' package.yaml
        stack sdist --ignore-check || true
        mkdir -p /tmp/sdist
        mv "$(stack path --dist-dir)"/*.tar.gz /tmp/sdist/
        ls -al /tmp/sdist
    - name: Save source distribution
      if: startsWith(matrix.os, 'ubuntu-')
      uses: actions/upload-artifact@v1
      with:
        name: sdist-${{ matrix.os }}-${{ matrix.resolver }}
        path: /tmp/sdist
    - name: Build using -fembed-dictionary
      run: stack build --flag seonbi:embed-dictionary
    - name: Copy executable binaries
      shell: bash
      run: cp -r "$(stack path --local-install-root)/bin" .bin
    - name: Compress executable binaries
      if: "startsWith(matrix.os, 'ubuntu-')"
      uses: gacts/upx@master
      with:
        dir: .bin
        upx_args: "-9"
    - name: Save executable binaries
      uses: actions/upload-artifact@v1
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.resolver }}
        path: .bin

  image:
    name: Docker image
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
      if: github.event_name != 'pull_request'
      with:
        fetch-depth: 1
    - uses: actions/checkout@v1
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.pull_request.head.sha }}
        fetch-depth: 1
    - run: |
        image_name="dahlia/seonbi"
        gh_image_name="docker.pkg.github.com/$GITHUB_REPOSITORY/bin"
        declare -a build_opts=()
        if [[ "$GITHUB_EVENT_NAME" = "pull_request" ]]; then
          sha="$(git log -n1 --format=%h)"
          tag="git-$sha"
        else
          if [[ "$GITHUB_REF" = "refs/heads/master" ]]; then
            tag=latest
          elif [[ "$GITHUB_REF" = refs/tags/* ]]; then
            tag="${GITHUB_REF:10}"
            build_opts+=(--label "org.opencontainers.image.version=$tag")
          else
            tag="${GITHUB_REF:11}"
          fi
        fi
        docker build \
          --tag "$image_name:$tag" \
          --tag "$gh_image_name:$tag" \
          --label org.opencontainers.image.revision=`git log -1 --format=%H` \
          --label \
            org.opencontainers.image.url=https://github.com/$GITHUB_REPOSITORY \
          --label org.opencontainers.image.description="$(cat README.md)" \
          "${build_opts[@]}" \
          .
        if [[ "$GITHUB_EVENT_NAME" != "pull_request" ]]; then
          docker login \
            docker.pkg.github.com \
            --username "${GITHUB_REPOSITORY#*/}" \
            --password "${{ secrets.GH_TOKEN }}"
          docker login \
            --username "${image_name%/*}" \
            --password "${{ secrets.DOCKERHUB_TOKEN }}"
          docker push "$gh_image_name:$tag"
          docker push "$image_name:$tag"
        fi
        docker save -o /tmp/image.tar "$image_name:$tag"
        mkdir -p /tmp/images
        pushd /tmp/images
        tar xvf /tmp/image.tar
        popd
        mkdir -p /tmp/image-metadata
        docker images "$image_name:$tag" | tail -n 1 | awk '{print $3}' \
          > /tmp/image-metadata/image_id.txt
    - uses: actions/upload-artifact@v1
      with:
        name: image
        path: /tmp/images
    - uses: actions/upload-artifact@v1
      with:
        name: image-metadata
        path: /tmp/image-metadata

  binaries:
    name: Package executable binaries
    needs:
    - build
    - image
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: binaries-macOS-10.15-lts-14.27
        path: /tmp/binaries-macos
    - uses: actions/download-artifact@v1
      with:
        name: binaries-windows-2019-lts-14.27
        path: /tmp/binaries-windows
    - uses: actions/download-artifact@v1
      with:
        name: image
        path: /tmp/images
    - uses: actions/download-artifact@v1
      with:
        name: image-metadata
        path: /tmp/image-metadata
    - run: |
        mkdir -p /tmp/dists
        # Linux
        pushd /tmp/images
        tar cvf ../image.tar .
        popd
        docker load -i /tmp/image.tar
        mkdir -p /tmp/binaries-linux
        image_id="$(cat /tmp/image-metadata/image_id.txt)"
        docker run -i "$image_id" cat /usr/local/bin/seonbi \
          > /tmp/binaries-linux/seonbi
        docker run -i "$image_id" cat /usr/local/bin/seonbi-api \
          > /tmp/binaries-linux/seonbi-api
        pushd /tmp/binaries-linux
        chmod +x *
        tar cvfj /tmp/dists/seonbi.linux-x86_64.tar.bz2 *
        popd
        # macOS
        pushd /tmp/binaries-macos
        chmod +x *
        tar cvfj /tmp/dists/seonbi.macos-x86_64.tar.bz2 *
        popd
        # Windows
        pushd /tmp/binaries-windows
        zip /tmp/dists/seonbi.win64.zip *
        popd
    - uses: actions/upload-artifact@v1
      with:
        name: dists
        path: /tmp/dists

  release:
    name: Release dist files
    needs:
    - build
    - binaries
    if: >-
      github.event_name != 'pull_request' &&
      startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v1
      with:
        name: sdist-ubuntu-18.04-lts-14.27
        path: /tmp/sdist
    - uses: actions/download-artifact@v1
      with:
        name: dists
        path: /tmp/dists
    - env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mkdir -p "$HOME/bin"
        export PATH="$HOME/bin:$PATH"
        curl -L -o "$HOME/bin/submark" \
          https://github.com/dahlia/submark/releases/download/0.2.0/submark-linux-x86_64
        chmod +x "$HOME/bin/submark"
        curl -L -o /tmp/github-release.tar.bz2 \
          https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2
        tar xvfj /tmp/github-release.tar.bz2 -C /tmp
        mv /tmp/bin/linux/amd64/github-release $HOME/bin

        version="${GITHUB_REF:10}"
        github_user="${GITHUB_REPOSITORY%/*}"
        github_repo="${GITHUB_REPOSITORY#*/}"

        # Release note
        submark -iO --h2 "Version $version" CHANGES.md \
        | github-release release \
            --user "$github_user" \
            --repo "$github_repo" \
            --tag "$version" \
            --name "Seonbi $version" \
            --description -

        # Source distribution
        for file in /tmp/sdist/*; do
          github-release upload \
            --user "$github_user" \
            --repo "$github_repo" \
            --tag "$version" \
            --name "$(basename "$file")" \
            --file "$file"
        done

        # Binaries
        for file in /tmp/dists/*; do
          name="$(basename "$file")"
          github-release upload \
            --user "$github_user" \
            --repo "$github_repo" \
            --tag "$version" \
            --name "${name/seonbi/seonbi-$version}" \
            --file "$file"
        done
    - env:
        HACKAGE_API_KEY: ${{ secrets.HACKAGE_API_KEY }}
      run: |
        for file in /tmp/sdist/*; do
          curl \
            -H "Authorization: X-ApiKey $HACKAGE_API_KEY" \
            -F package=@"$file" \
            https://hackage.haskell.org/packages/
        done

  demo:
    name: Deploy demo app
    needs:
    - binaries
    if: >-
      github.event_name != 'pull_request' &&
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - uses: actions/download-artifact@v1
      with:
        name: dists
        path: /tmp/dists
    - run: |
        pushd /tmp
        curl -L -o elm.gz \
          https://github.com/elm/compiler/releases/download/0.19.1/binary-for-linux-64-bit.gz
        gunzip elm.gz
        chmod +x elm
        popd
        git config --global user.name "$GITHUB_ACTOR"
        git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git init /tmp/html
        cd demo/
        /tmp/elm make --optimize --output=/tmp/html/index.html src/Demo.elm

        # GitHub Corners <https://github.com/tholman/github-corners>
        sed -Ezi 's|\s*</body>\s*</html>\s*$||' /tmp/html/index.html
        {
          cat github-corner.html
          echo '</body></html>'
        } >> /tmp/html/index.html

        cd /tmp/html
        git add index.html
        mkdir dists
        mv /tmp/dists dists/latest
        git add dists
        git commit -m 'Demo app'
        git branch --move gh-pages
        auth="$GITHUB_ACTOR:${{ secrets.GH_TOKEN }}"
        git remote add origin \
          "https://$auth@github.com/$GITHUB_REPOSITORY.git"
        git push -f origin gh-pages
